// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum USERROLE {
    ADMIN
    USER
}

enum Layout {
    IMGFULLSCREEN
    IMGTOPNAV
}

enum IconsPosition {
    TOP
    BOTTOM
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model User {
    id                String       @id @default(cuid())
    name              String?
    username          String?      @unique
    usernameUpdatedAt DateTime?
    banner            String?
    embed             String?
    layout            Layout       @default(IMGTOPNAV)
    role              USERROLE     @default(USER)
    email             String?      @unique
    about             String?      @default("New to Tielinks✌️")
    emailVerified     DateTime?
    tielinkJoinedAt   DateTime?    @default(now())
    image             String?
    Status            Status?
    accounts          Account[]
    pageVisits        PageVisits[]
    Socials           Socials[]
    Links             Links[]
    LinkClicks        LinkClicks[]
}

model Status {
    id        Int      @id @default(autoincrement())
    emoji     String?
    status    String?
    timestamp DateTime @default(now())
    userId    String   @unique
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Socials {
    id       Int           @id @default(autoincrement())
    type     String
    handle   String
    userId   String
    position IconsPosition @default(TOP)
    user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Links {
    id         Int          @id @default(autoincrement())
    title      String
    url        String
    logo       String?
    linkClicks LinkClicks[]
    userId     String
    user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PageVisits {
    id             Int      @id @default(autoincrement())
    ip             String?
    country        String?
    city           String?
    userAgent      String?
    browser        String?
    browserVersion String?
    os             String?
    osVersion      String?
    referrer       String?
    referrerType   String?
    referringURL   String?
    device         String?
    language       String?
    latitude       Float?
    longitude      Float?
    timestamp      DateTime @default(now())
    userId         String
    user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LinkClicks {
    id        Int      @id @default(autoincrement())
    timestamp DateTime @default(now())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    linkId    Int
    link      Links    @relation(fields: [linkId], references: [id], onDelete: Cascade)
}
